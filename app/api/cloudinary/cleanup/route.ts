/*
This route deletes all the images from cloudinary if image's publicId is not referenced by any document
i.e garbage or unwanted images which are stored in cloudinary and simply wasting space
Such image can be generated by user if they upload it and forget to save image (a database operation saves image metadata in database)
refer image.model.ts for info on metadata
This route must invoked by GitHub actions or other services for every 5 min (Not necessarily)
and interval limit must be shortened if application gets more traffic and users
*/
import Image from "@/database/models/image.model";
import { v2 as cloudinary, ResourceApiResponse } from "cloudinary";
import { NextResponse } from "next/server";

export async function GET() {
  console.time("cleanup");
  console.log("Cleanup function started...");
  try {
    const images = await Image.find();
    const publicIds: string[] = images.map(image => image.publicId);

    cloudinary.config({
      cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,
      api_key: process.env.CLOUDINARY_API_KEY,
      api_secret: process.env.CLOUDINARY_API_SECRET,
      secure: true,
    });

    // Convert to Unix timestamp in seconds (5 minutes ago)
    const fiveMinutesAgo = Math.floor(new Date().getTime() / 1000) - 5 * 60;

    // Search for resources older than 5 minutes
    const { resources } = (await cloudinary.search
      .expression(`folder=${process.env.CLOUDINARY_IMAGE_FOLDER} AND uploaded_at<${fiveMinutesAgo}`)
      .max_results(100)
      .execute()) as ResourceApiResponse;

    // Filter unwanted images which are not available in database
    const filteredPublicIdsToDelete = resources
      .filter(resource => !publicIds.includes(resource.public_id))
      .map(resource => resource.public_id);
    // if no unwanted resources found then cleanup action is not required, simply end the execution
    if (filteredPublicIdsToDelete.length <= 0) {
      return NextResponse.json({ message: "No unwanted resources found" }, { status: 200 });
    }
    console.log("Deleted Cloudinary Public IDs:", filteredPublicIdsToDelete);

    await cloudinary.api.delete_resources(filteredPublicIdsToDelete);

    return NextResponse.json({ message: "Unwanted resources deleted from cloudinary" }, { status: 200 });
  } catch (error) {
    console.timeEnd("cleanup");
    console.log("ERROR IN api/cloudinary/cleanup", error);
    return NextResponse.json({ message: (error as Error).message }, { status: 500 });
  } finally {
    console.log("Cleanup function ended...");
    console.timeEnd("cleanup");
  }
}
